/**
 * This code was generated by v0 by Vercel.
 * @see https://v0.dev/t/8xm952KA7nt
 * Documentation: https://v0.dev/docs#integrating-generated-code-into-your-nextjs-app
 */
import { Button } from "@/components/ui/button";
import { ScrollArea } from "@/components/ui/scroll-area";
import { TooltipContent } from "@radix-ui/react-tooltip";
import Image from "next/image";
import React, { Dispatch, SetStateAction, useEffect, useRef } from "react";
import { MdOutlineRepeatOne, MdOutlineShuffle } from "react-icons/md";

import { IItem } from "../../../app/page";
import { Tooltip, TooltipProvider, TooltipTrigger } from "../ui/tooltip";

import Logo from "/public/logo.png";

interface PlaylistProps {
  currentAudioIndex: number;
  setCurrentAudioIndex: Dispatch<SetStateAction<number>>;
  tracks: IItem[];
}

export const Playlist: React.FC<PlaylistProps> = ({ currentAudioIndex, setCurrentAudioIndex, tracks }) => {
  const trackRefs = useRef<(HTMLDivElement | null)[]>([]);

  // auto scroll to currently playing song
  useEffect(() => {
    if (currentAudioIndex !== null && trackRefs.current[currentAudioIndex] !== null) {
      trackRefs.current[currentAudioIndex]?.scrollIntoView({ behavior: "smooth", block: "center" });
    }
  }, [currentAudioIndex]);

  // format duration of each song to mm:ss from seconds
  const formatTime = (seconds: number) => {
    const minutes = Math.floor(seconds / 60);
    const remainingSeconds = Math.floor(seconds % 60);
    return `${minutes}:${remainingSeconds < 10 ? "0" : ""}${remainingSeconds}`;
  };

  return (
    <div className="bg-background rounded-lg border px-6 py-4 w-full max-w-md">
      <div className="flex items-center justify-between mb-4">
        <h2 className="text-lg font-semibold">Playlist</h2>
        <div className="flex items-center gap-2">
          <Button size="sm" variant="ghost">
            <MdOutlineShuffle className="w-6 h-6 text-primary/50" />
          </Button>
          <Button size="sm" variant="ghost">
            <MdOutlineRepeatOne className="w-6 h-6 text-primary" />
          </Button>
        </div>
      </div>
      <ScrollArea className="h-[500px]">
        <div className="grid gap-4 pr-4">
          {tracks.map((item, idx) => (
            <div
              className={"flex items-center gap-4 cursor-pointer"}
              key={idx}
              onClick={() => setCurrentAudioIndex(idx)}
              ref={el => {
                trackRefs.current[idx] = el as HTMLDivElement | null;
              }}
            >
              <Image alt={item.name} height={36} src={Logo} width={36} />
              <div className="flex-1 text-left">
                <TooltipProvider>
                  <Tooltip>
                    <TooltipTrigger>
                      <div className="track-name text-base text-left line-clamp-1">{item.name}</div>
                    </TooltipTrigger>
                    <TooltipContent className="border px-2 bg-background rounded-lg" side="bottom">
                      {item.name}
                    </TooltipContent>
                  </Tooltip>
                </TooltipProvider>
                <div className="text-sm text-muted-foreground line-clamp-1">{item.artist}</div>
              </div>
              <div className="text-sm text-muted-foreground">{formatTime(item.duration)}</div>{" "}
              {idx === currentAudioIndex && (
                <div className="bg-primary text-primary-foreground rounded-full px-2 py-1 text-xs">Playing</div>
              )}
            </div>
          ))}
        </div>
      </ScrollArea>
    </div>
  );
};
